/* ====== –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç—Ç–∞–∂–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞–±–∏–Ω–µ—Ç–∞ ====== */
function getFloorByNumber(number) {
    const num = parseInt(number, 10);
    if (isNaN(num)) return null;

    if (num >= 1 && num <= 200) return 1;   // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ IT 1 —ç—Ç–∞–∂
    if (num >= 201 && num <= 300) return 2; // IT 2 —ç—Ç–∞–∂
    if (num >= 301 && num <= 400) return 3; // –ù–∞—É—á–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ 3 —ç—Ç–∞–∂
    if (num >= 401 && num <= 405) return 4; // –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—É–¥–∏–∏ 4 —ç—Ç–∞–∂

    return null; // –ï—Å–ª–∏ –∫–∞–±–∏–Ω–µ—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ 1‚Äì405
}

/* ====== –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞–±–∏–Ω–µ—Ç–∞ ====== */
function findClassroom(query) {
    const normalizedQuery = query.toLowerCase().replace(/[^a-z–∞-—è”ô“ì“õ“£”©“Ø“ª—ñ0-9]+/gi, ' ').trim();

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞–±–∏–Ω–µ—Ç–∞
    for (const category in classrooms) {
        const room = classrooms[category].find(r =>
            r.number === normalizedQuery || normalizedQuery.split(' ').includes(r.number)
        );
        if (room) return room;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–∂–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    const match = normalizedQuery.match(/\b\d{1,3}\b/);
    if (match) {
        const floor = getFloorByNumber(match[0]);
        if (floor) return { number: match[0], floor: floor, description: `–ö–∞–±–∏–Ω–µ—Ç ${match[0]} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ ${floor}-–º —ç—Ç–∞–∂–µ.` };
        return { number: match[0], description: `–ö–∞–±–∏–Ω–µ—Ç ${match[0]} –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–∂–µ–π (1‚Äì405).` };
    }

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    for (const category in classrooms) {
        const room = classrooms[category].find(r =>
            normalizedQuery.includes(r.name.toLowerCase()) ||
            r.name.toLowerCase().includes(normalizedQuery)
        );
        if (room) return room;
    }

    if (matchAny(normalizedQuery, ['it', '–∞–π—Ç–∏', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä'])) {
        return { category: 'it', description: 'IT-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ 1‚Äì2 —ç—Ç–∞–∂–∞—Ö' };
    }
    if (matchAny(normalizedQuery, ['–Ω–∞—É–∫–∞', '–±–∏–æ–ª–æ–≥', '—Ö–∏–º', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä'])) {
        return { category: 'science', description: '–ù–∞—É—á–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ 3 —ç—Ç–∞–∂–µ' };
    }
    if (matchAny(normalizedQuery, ['–∏—Å–∫—É—Å—Å—Ç–≤', '—Ç–≤–æ—Ä—á', '—Ç–∞–Ω—Ü', '—Ç–µ–∞—Ç—Ä', '–º—É–∑—ã–∫', '—Ä–∏—Å–æ–≤–∞–Ω'])) {
        return { category: 'art', description: '–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —Å—Ç—É–¥–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ 4 —ç—Ç–∞–∂–µ' };
    }

    return null;
}

/* ====== –õ–æ–≥–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞ ====== */
function agentResponse(input){
    if(!input) return "–°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å :)";

    const s = input.toLowerCase();

    // ===== –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è =====
    if (/\b(hello|hi|hey)\b/.test(s)) {
        const greetings = [
            "Hello! I am an interactive assistant at the Petropavlovsk Schoolchildren's Palace. How can I help?",
            "Good afternoon! Ask me about clubs, directions, classrooms or events."
        ];
        return greetings[Math.floor(Math.random() * greetings.length)];
    }

    if (/\b(—Å–∞–ª–µ–º|—Å–∞–ª–µ–º–µ|—Å”ô–ª–µ–º)\b/.test(s)) {
        const greetings = [
            "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑–¥–µ—Ä –º–µ! –ú–µ–Ω –ü–µ—Ç—Ä–æ–ø–∞–≤–ª “õ–∞–ª–∞–ª—ã“õ –û“õ—É—à—ã–ª–∞—Ä —Å–∞—Ä–∞–π—ã–Ω—ã“£ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –∫”©–º–µ–∫—à—ñ—Å—ñ–º—ñ–Ω. “ö–∞–ª–∞–π –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω?",
            "“ö–∞–π—ã—Ä–ª—ã –∫“Ø–Ω! –ú–µ–Ω —Å—ñ–∑–≥–µ –û“õ—É—à—ã–ª–∞—Ä —Å–∞—Ä–∞–π—ã–Ω–¥–∞ –∂–æ–ª –∫”©—Ä—Å–µ—Ç–µ–º—ñ–Ω. –ö–ª—É–±—Ç–∞—Ä, –±”©–ª–º–µ–ª–µ—Ä –Ω–µ–º–µ—Å–µ –æ“õ–∏“ì–∞–ª–∞—Ä —Ç—É—Ä–∞–ª—ã —Å“±—Ä–∞“£—ã–∑."
        ];
        return greetings[Math.floor(Math.random() * greetings.length)];
    }

    if (/\b(–ø—Ä–∏–≤|–∑–¥—Ä)\b/.test(s)) {
        const greetings = [
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –î–≤–æ—Ä—Ü–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –∫—Ä—É–∂–∫–∞—Ö, –∫–∞–±–∏–Ω–µ—Ç–∞—Ö, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö."
        ];
        return greetings[Math.floor(Math.random() * greetings.length)];
    }

    // ===== –ü–æ–∏—Å–∫ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è =====
    if (matchAny(s, ['–∫–∞–±–∏–Ω–µ—Ç', '–∞—É–¥–∏—Ç–æ—Ä', '–∫–æ–º–Ω–∞—Ç–∞', '–±”©–ª–º–µ', '–∫–ª–∞—Å—Å', '–∫–∞–∫ –Ω–∞–π—Ç–∏', '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '–≥–¥–µ –Ω–∞–π—Ç–∏', '“õ–∞–π–¥–∞', '–º–µ–∫–µ–Ω–∂–∞–π'])) {
        const classroom = findClassroom(s);

        if (classroom && classroom.number) {
            const floorText = classroom.floor ? (classroom.floor === 1 ? '1 —ç—Ç–∞–∂–µ' : `${classroom.floor}-–º —ç—Ç–∞–∂–µ`) : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º —ç—Ç–∞–∂–µ';
            return `–ö–∞–±–∏–Ω–µ—Ç ${classroom.number}${classroom.name ? ` (¬´${classroom.name}¬ª) ` : ''}–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ ${floorText}. ${classroom.description || ''}`;
        } else if (classroom && classroom.category) {
            return classroom.description;
        } else {
            return "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∫–∞–±–∏–Ω–µ—Ç. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ.";
        }
    }

    // ===== –≠—Ç–∞–∂–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ =====
    if (matchAny(s, ['—ç—Ç–∞–∂', '“õ–∞–±–∞—Ç', 'floor', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞', '—Å—Ö–µ–º–∞'])) {
        return "–ü–ª–∞–Ω–∏—Ä–æ–≤–∫–∞ –î–≤–æ—Ä—Ü–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤:\n\n" +
               "üîπ 1 —ç—Ç–∞–∂: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è, IT (001‚Äì102)\n" +
               "üîπ 2 —ç—Ç–∞–∂: IT, –í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ (201‚Äì202)\n" +
               "üîπ 3 —ç—Ç–∞–∂: –ù–∞—É—á–Ω—ã–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ (301‚Äì304)\n" +
               "üîπ 4 —ç—Ç–∞–∂: –•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ-—ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (401‚Äì405)";
    }

    // ===== –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ =====
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.";
}
